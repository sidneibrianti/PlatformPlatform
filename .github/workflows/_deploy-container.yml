name: Deploy Container

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      version:
        required: true
        type: string
      artifacts_name:
        required: true
        type: string
      artifacts_path:
        required: true
        type: string
      docker_context:
        required: true
        type: string
      docker_file:
        required: true
        type: string

jobs:
  stage:
    name: Staging
    runs-on: ubuntu-latest
    # environment: "staging"  # Manual approval disabled
    if: ${{ vars.STAGING_CLUSTER_ENABLED == 'true' && github.ref == 'refs/heads/main' }}
    env:
      UNIQUE_PREFIX: ${{ vars.UNIQUE_PREFIX }}
      ENVIRONMENT: "stage"
      CLUSTER_LOCATION_ACRONYM: ${{ vars.STAGING_CLUSTER_LOCATION_ACRONYM }}
      SERVICE_PRINCIPAL_ID: ${{ vars.STAGING_SERVICE_PRINCIPAL_ID }}
      TENANT_ID: ${{ vars.TENANT_ID }}
      SUBSCRIPTION_ID: ${{ vars.STAGING_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifacts_name }}
          path: ${{ inputs.artifacts_path }}

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.SERVICE_PRINCIPAL_ID }}
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Login to ACR
        run: az acr login --name ${{ env.UNIQUE_PREFIX }}${{ env.ENVIRONMENT }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push container image
        working-directory: ${{ inputs.docker_context }}
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg VERSION=${{ inputs.version }} \
            -t ${{ env.UNIQUE_PREFIX }}${{ env.ENVIRONMENT }}.azurecr.io/${{ inputs.image_name }}:${{ inputs.version }} \
            -t ${{ env.UNIQUE_PREFIX }}${{ env.ENVIRONMENT }}.azurecr.io/${{ inputs.image_name }}:latest \
            -f ${{ inputs.docker_file }} \
            --push .
          docker buildx rm

      - name: Deploy Container
        run: |
          SUFFIX=$(echo "${{ inputs.version }}" | sed 's/\./-/g')
          az containerapp update --name ${{ inputs.image_name }} --resource-group "${{ env.UNIQUE_PREFIX }}-${{ env.ENVIRONMENT }}-${{ env.CLUSTER_LOCATION_ACRONYM }}" --image "${{ env.UNIQUE_PREFIX }}${{ env.ENVIRONMENT }}.azurecr.io/${{ inputs.image_name }}:${{ inputs.version }}" --revision-suffix $SUFFIX

          echo "Waiting for the new revision to be active..."
          for i in {1..10}; do
            sleep 15

            RUNNING_STATUS=$(az containerapp revision list --name ${{ inputs.image_name }} --resource-group "${{ env.UNIQUE_PREFIX }}-${{ env.ENVIRONMENT }}-${{ env.CLUSTER_LOCATION_ACRONYM }}" --query "[?contains(name, '$SUFFIX')].properties.runningState" --output tsv)
            HEALTH_STATUS=$(az containerapp revision list --name ${{ inputs.image_name }} --resource-group "${{ env.UNIQUE_PREFIX }}-${{ env.ENVIRONMENT }}-${{ env.CLUSTER_LOCATION_ACRONYM }}" --query "[?contains(name, '$SUFFIX')].properties.healthState" --output tsv)
            if [[ "$HEALTH_STATUS" == "Healthy" ]]; then
              echo "New revision is healthy. Running state: $RUNNING_STATUS"
              exit 0
            fi
            if [[ "$HEALTH_STATUS" == "Unhealthy" ]]; then
              echo "New revision is Unhealthy. Running state: $RUNNING_STATUS"
              exit 1
            fi
            
            echo "($i) Waiting for revision to become active. Running state: $RUNNING_STATUS"
          done
          echo "New revision did not become active in time. Running state: $RUNNING_STATUS"
          exit 1

  prod1:
    name: Production
    needs: stage
    environment: "production" # Force a manual approval
    runs-on: ubuntu-latest
    if: ${{ vars.PRODUCTION_CLUSTER1_ENABLED == 'true' && github.ref == 'refs/heads/main' }}
    env:
      UNIQUE_PREFIX: ${{ vars.UNIQUE_PREFIX }}
      ENVIRONMENT: "prod"
      CLUSTER_LOCATION_ACRONYM: ${{ vars.PRODUCTION_CLUSTER1_LOCATION_ACRONYM }}
      SERVICE_PRINCIPAL_ID: ${{ vars.PRODUCTION_SERVICE_PRINCIPAL_ID }}
      TENANT_ID: ${{ vars.TENANT_ID }}
      SUBSCRIPTION_ID: ${{ vars.PRODUCTION_SUBSCRIPTION_ID }}

    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.SERVICE_PRINCIPAL_ID }}
          tenant-id: ${{ env.TENANT_ID }}
          subscription-id: ${{ env.SUBSCRIPTION_ID }}

      - name: Deploy Container
        run: |
          SUFFIX=$(echo "${{ inputs.version }}" | sed 's/\./-/g')
          az containerapp update --name ${{ inputs.image_name }} --resource-group "${{ env.UNIQUE_PREFIX }}-${{ env.ENVIRONMENT }}-${{ env.CLUSTER_LOCATION_ACRONYM }}" --image "${{ env.UNIQUE_PREFIX }}${{ env.ENVIRONMENT }}.azurecr.io/${{ inputs.image_name }}:${{ inputs.version }}" --revision-suffix $SUFFIX

          echo "Waiting for the new revision to be active..."
          for i in {1..10}; do
            sleep 15

            RUNNING_STATUS=$(az containerapp revision list --name ${{ inputs.image_name }} --resource-group "${{ env.UNIQUE_PREFIX }}-${{ env.ENVIRONMENT }}-${{ env.CLUSTER_LOCATION_ACRONYM }}" --query "[?contains(name, '$SUFFIX')].properties.runningState" --output tsv)
            HEALTH_STATUS=$(az containerapp revision list --name ${{ inputs.image_name }} --resource-group "${{ env.UNIQUE_PREFIX }}-${{ env.ENVIRONMENT }}-${{ env.CLUSTER_LOCATION_ACRONYM }}" --query "[?contains(name, '$SUFFIX')].properties.healthState" --output tsv)
            if [[ "$HEALTH_STATUS" == "Healthy" ]]; then
              echo "New revision is healthy. Running state: $RUNNING_STATUS"
              exit 0
            fi
            if [[ "$HEALTH_STATUS" == "Unhealthy" ]]; then
              echo "New revision is Unhealthy. Running state: $RUNNING_STATUS"
              exit 1
            fi
            
            echo "($i) Waiting for revision to become active. Running state: $RUNNING_STATUS"
          done
          echo "New revision did not become active in time. Running state: $RUNNING_STATUS"
          exit 1