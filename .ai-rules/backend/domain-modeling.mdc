---
description: Domain-Driven Design modeling rules for aggregates, entities, and value objects in the backend, including structure and implementation guidelines.
globs: **/Domain/*.cs
alwaysApply: false
---
# Domain Modeling

## Implementation

1. Create all DDD models in the `/[scs-name]/Core/Features/[Feature]/Domain` directory, including aggregates, entities, value objects, strongly typed IDs, repositories, and repository configurations.
2. Understand the core DDD concepts:
   - Aggregates are the root of the DDD model and map 1:1 to database tables.
   - Entities belong to aggregates but have their own identity.
   - Value objects are immutable and have no identity.
   - Repositories are used to read and write aggregates in the database.
3. Store entities and value objects as JSON columns on the Aggregate in the database for better performance and to avoid EF Core's `Include()` method.
4. For Aggregates:
   - Use public sealed classes that inherit from `AggregateRoot<TId>`.
   - Create a strongly typed ID for aggregates; consult [Strongly Typed IDs](mdc:.ai-rules/backend/strongly-typed-ids.mdc) for details.
   - Never use navigational properties to other aggregates (e.g., don't use `User.Tenant`, or `Order.Customer`).
   - Use factory methods when creating new aggregates.
   - Make properties private, and use methods when changing state and enforcing business rules.
   - Make properties immutable.
   - Create a corresponding repository interface and implementation for each aggregate; consult [Repositories](mdc:.ai-rules/backend/repositories.mdc) for details.
5. For Entities:
   - Use public sealed classes that inherit from `Entity<TId>`.
   - Create a strongly typed ID for entities; consult [Strongly Typed IDs](mdc:.ai-rules/backend/strongly-typed-ids.mdc) for details.
   - Use factory methods when creating new entities.
   - Use private setters to control state changes.
   - Make properties private, and use methods when changing state and enforcing business rules.
6. For Value Objects:
   - Use records to ensure immutability.
   - Value objects do not have an ID.
   - Store value objects as JSON columns on the Aggregate in the database.
 
## Examples

### Example 1 - Simple Aggregate

```csharp
// ✅ DO: Use sealed classes, private constructors, factory methods, and proper encapsulation
public sealed class User : AggregateRoot<UserId>, ITenantScopedEntity
{
    private string _email = string.Empty;

    private User(TenantId tenantId, string email, UserRole role)
        : base(UserId.NewId())
    {
        Email = email;
        TenantId = tenantId;
        Role = role;
        Avatar = new Avatar();
    }

    public string Email
    {
        get => _email;
        private set => _email = value.Trim().ToLowerInvariant();
    }

    public UserRole Role { get; private set; }

    public Avatar Avatar { get; private set; }

    public TenantId TenantId { get; }

    public static User Create(TenantId tenantId, string email, UserRole role)
    {
        return new User(tenantId, email, role);
    }

    public void UpdateEmail(string email)
    {
        Email = email;
    }

    public void ChangeUserRole(UserRole userRole)
    {
        Role = userRole;
    }

    public void UpdateAvatar(string avatarUrl, bool isGravatar)
    {
        Avatar = new Avatar(avatarUrl, Avatar.Version + 1, isGravatar);
    }

    public void RemoveAvatar()
    {
        Avatar = new Avatar(Version: Avatar.Version);
    }
}

// ✅ DO: Use records for value objects to ensure immutability
public sealed record Avatar(string? Url = null, int Version = 0, bool IsGravatar = false);

// ✅ DO: Create strongly typed IDs for aggregates
[PublicAPI]
[IdPrefix("usr")]
[JsonConverter(typeof(StronglyTypedIdJsonConverter<string, UserId>))]
public sealed record UserId(string Value) : StronglyTypedUlid<UserId>(Value)
{
    public override string ToString()
    {
        return Value;
    }
}

// ❌ DON'T: Use public constructors or expose mutable state
public class BadUser : AggregateRoot<BadUserId>
{
    // Public constructor instead of factory method
    public BadUser(TenantId tenantId, string email, UserRole role)
        : base(BadUserId.NewId())
    {
        TenantId = tenantId;
        Email = email;
        Role = role;
    }

    // Public setters expose mutable state
    public string Email { get; set; }

    public UserRole Role { get; set; }

    public TenantId TenantId { get; set; }
}
```

### Example 2 - Complex Order Aggregate with OrderLine Entity and Address Value Object

```csharp
// ✅ DO: Store entities and value objects as JSON columns on the Aggregate
// Orders.cs
public sealed class Order : AggregateRoot<OrderId>
{
    private readonly List<OrderLine> _orderLines = new();
    
    private Order(CustomerId customerId, Address? address)
        : base(OrderId.NewId())
    {
        CustomerId = customerId;
        Address = address;
    }
    
    public CustomerId CustomerId { get; }
    
    public Address? Address { get; private set; }
    
    public IReadOnlyCollection<OrderLine> OrderLines => _orderLines.AsReadOnly();
    
    public decimal TotalAmount => _orderLines.Sum(line => line.TotalPrice);
    
    public static Order Create(CustomerId customerId)
    {
        return new Order(customerId, null);
    }
    
    public void AddOrderLine(ProductId productId, string productName, int quantity, decimal unitPrice)
    {
        var orderLine = OrderLine.Create(productId, productName, quantity, unitPrice);
        _orderLines.Add(orderLine);
    }

    public void SetAddress(Address address)
    {
        Address = address;
    }
}

[PublicAPI]
[IdPrefix("ord")]
[JsonConverter(typeof(StronglyTypedIdJsonConverter<string, OrderId>))]
public sealed record OrderId(string Value) : StronglyTypedUlid<OrderId>(Value);

// ✅ DO: Use records for value objects
public sealed record Address(string Street, string City, string State, string ZipCode, string Country);

// ✅ DO: Use classes for entity objects
public sealed class OrderLine : Entity<OrderLineId>
{
    private OrderLine(OrderLineId id, ProductId productId, string productName, int quantity, decimal unitPrice)
        : base(id)
    {
        ProductId = productId;
        ProductName = productName;
        Quantity = quantity;
        UnitPrice = unitPrice;
    }
    
    public ProductId ProductId { get; }
    
    public string ProductName { get; }
    
    public int Quantity { get; }
    
    public decimal UnitPrice { get; }
    
    public decimal TotalPrice => UnitPrice * Quantity;
    
    internal static OrderLine Create(ProductId productId, string productName, int quantity, decimal unitPrice)
    {
        if (quantity <= 0) throw new ArgumentException("Quantity must be positive", nameof(quantity));

        if (unitPrice <= 0) throw new ArgumentException("Unit price must be positive", nameof(unitPrice));

        return new OrderLine(OrderLineId.NewId(), productId, productName, quantity, unitPrice);
    }
}

[PublicAPI]
[IdPrefix("ordln")]
[JsonConverter(typeof(StronglyTypedIdJsonConverter<string, OrderLineId>))]
public sealed record OrderLineId(string Value) : StronglyTypedUlid<OrderLineId>(Value);

// ✅ DO: Configure entity framework to store entities and value objects as JSON
// OrderConfiguration.cs
public sealed class OrderConfiguration : IEntityTypeConfiguration<Order>
{
    public void Configure(EntityTypeBuilder<Order> builder)
    {
        builder.MapStronglyTypedUlid<Order, OrderId>(o => o.Id);
        builder.MapStronglyTypedUlid<Order, CustomerId>(o => o.CustomerId);
        builder.OwnsOne(o => o.Address, b => b.ToJson());

        builder.OwnsMany(o => o.OrderLines, b =>
        {
            b.MapStronglyTypedUlid<OrderLine, OrderLineId>(ol => ol.Id);
            b.MapStronglyTypedUlid<OrderLine, ProductId>(ol => ol.ProductId);
        });
    }
}

// ❌ DON'T: Use navigational properties to other aggregates
public class BadOrder : AggregateRoot<BadOrderId>
{
    // Don't use navigational properties to other aggregates
    public Customer Customer { get; set; } // Wrong: direct reference to another aggregate
    
    // Instead, use the ID to reference other aggregates
    public CustomerId CustomerId { get; } // Correct: reference by ID
}
```

See [Repositories](mdc:.ai-rules/backend/repositories.mdc) for details on implementing the repository pattern for these domain models.
