import { RoutePage } from "./routeDetails";

const routePageImport = (routePage: RoutePage) => `require("${routePage.importRootPath}/${routePage.page}").default`;
const routePageDynamicImport = (routePage: RoutePage) => `() => import("${routePage.importRootPath}/${routePage.page}")`;

export const layoutPageCode = (routePage: RoutePage) => `createLayoutPage(${routePageImport(routePage)})`;
export const lazyLoadingPageCode = (routePage: RoutePage, loadingPage: RoutePage) => `createLazyLoadedPage(${routePageImport(loadingPage)}, ${routePageDynamicImport(routePage)})`;
export const normalPageCode = (routePage: RoutePage) => `createNormalPage(${routePageImport(routePage)})`;
export const errorPageCode = (routePage: RoutePage) => `createErrorPage(${routePageImport(routePage)})`;

export const createBrowserRouterCode = (routerCode: string, basename: string = "") =>
`/**
 * This file was auto-generated by @platformplatform/client-filesystem-router.
 * Do not make direct changes to the file.
 */
import { ComponentType, FunctionComponent, Suspense, createElement, lazy } from "react";
import { createBrowserRouter, useOutlet, useParams, useRouteError } from "react-router-dom";

const routes = [${routerCode}];

export const router = createBrowserRouter(routes, { basename: "${basename}" });
${createPageFunctionsCode()}
`;

export const createPageFunctionsCode = () => {
return `
export interface PageProps<T extends unknown = unknown> {
  params: T;
};

// @ts-ignore
export interface ErrorPageProps<E extends unknown = unknown> extends PageProps {
  error: E;
  reset: () => void;
};

// @ts-ignore
export type LazyLoadedPage = () => Promise<{ default: ComponentType<any> }>;

// @ts-ignore
function createErrorPage(errorPage: FunctionComponent) {
  return createElement(() => {
    /* Error page */
    const error = useRouteError();
    const params = useParams();
    const reset = () => {
      // eslint-disable-next-line no-console
      console.log("Not implemented");
    };
    return createElement<ErrorPageProps>(errorPage, { params, error, reset }, null);
  });
}

// @ts-ignore
function createLazyLoadedPage(fallbackPage: FunctionComponent, pageImport: LazyLoadedPage) {
  return createElement(() => {
    /* Lazy loading */
    const params = useParams();
    return createElement(Suspense, {
      fallback: createElement<PageProps>(fallbackPage, { params }, null),
    }, createElement<PageProps>(lazy(pageImport), { params }, null));
  });
}

// @ts-ignore
function createNormalPage(pageImport: FunctionComponent) {
  return createElement(() => {
    /* Normal page */
    const params = useParams();
    return createElement<PageProps>(pageImport, { params }, null);
  });
}

// @ts-ignore
function createLayoutPage(layoutImport: FunctionComponent) {
  return createElement(() => {
    /* Layout */
    const children = useOutlet();
    const params = useParams();
    return createElement<PageProps>(layoutImport, { params }, children);
  });
}
`;
};